import { Markup, Telegraf, session } from 'telegraf';
import dotenv from 'dotenv';
import { adminMenu } from './components/adminMenu';
import { handleCallbackQuery } from './utils/callback_interceptor';
import { MyContext } from './types/CstContext';
import { pages } from './components/what_bot_can';
import { generatePairButtons } from './utils/btn_generate';
import { getPaginationKeyboard } from './utils/pagintaion';
import fs from 'fs';
import {
  formatLeaderboardPage,
  paginateUsers,
} from './utils/leaderboard';
import { topUsers } from './components/top-user';
import { getPaginationKeyboardUsers } from './utils/pag-top-user';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN!;
const bot = new Telegraf<MyContext>(BOT_TOKEN);

bot.use(session());

bot.launch();
const images = {
  up: './src/assets/up.png',
  down: './src/assets/down.png',
};

function generateMarketSignal(pair: string) {
  const directions = [
    { text: '–í–´–®–ï ‚Üë', emoji: 'üìà', img: images.up },
    { text: '–ù–ò–ñ–ï ‚Üì', emoji: 'üìâ', img: images.down },
  ];
  const risks = ['Low risk', 'Moderate risk', 'High risk'];

  const randomPercent = (Math.random() * (1.5 - 0.1) + 0.1).toFixed(2);
  const direction = directions[Math.floor(Math.random() * directions.length)];
  const risk = risks[Math.floor(Math.random() * risks.length)];

  const marketOverview =
    '‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: Moderate ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: Bearish ‚Ä¢ –û–±—ä—ë–º: Spiked';
  const tradingViewRating =
    '‚Ä¢ –°–≤–æ–¥–∫–∞: STRONG SELL ‚Ä¢ –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ: SELL ‚Ä¢ –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã: BUY';
  const technicalAnalysis =
    '‚Ä¢ RSI (14): Topping Out ‚Ä¢ MACD: Bullish Crossover ‚Ä¢ –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: Whipsaw Reactions ‚Ä¢ Pattern: Double Top';

  const text = `${pair} –ü—Ä–æ–≥–Ω–æ–∑ (+${randomPercent}%) ${direction.text} (${risk})

–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞: ${marketOverview}

–†–µ–π—Ç–∏–Ω–≥ TradingView: ${tradingViewRating}

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: ${technicalAnalysis}`;

  return { text, imgPath: direction.img };
}

bot.start(async (ctx) => {
  const telegramId = String(ctx.from.id);

  const res = await fetch(`http://localhost:3000/users`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      telegramId,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
    }),
  });
  const user = await res.json();
  console.log(user);

  if (user?.role.includes('admin')) {
    await ctx.reply('–í—ã –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    await ctx.reply('–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:', adminMenu);
  }

  await ctx.replyWithPhoto(
    { source: './src/assets/welcome.jpg' },
    {
      caption: `üìà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

üî• –¢–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤!
–ù–∞—à –±–æ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
–¢–æ—Ä–≥—É–π —Ä–∞–∑—É–º–Ω–µ–µ, —É–ø—Ä–∞–≤–ª—è–π —Ä–∏—Å–∫–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø–æ–ª–∞–≥–∞–π—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã!

üí° –ù–∞—à –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Å–≤–µ—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É.
–¢—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç—å –æ–ø—Ü–∏–æ–Ω!

üí∞ –¢–æ—Ä–≥—É–π —Å —É–º–æ–º ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ! üöÄ`,
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('–î–∞–ª–µ–µ', 'show_main_menu')],
      ]).reply_markup,
    }
  );

  if (!user) {
    await fetch(`http://localhost:3000/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        telegramId,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      }),
    });
  }
});
bot.action('how_works_bot', async (ctx) => {
  const page = 0;
  await ctx.replyWithPhoto(
    { source: pages[page].photo },
    {
      caption: pages[page].text,
      parse_mode: 'Markdown',
      ...getPaginationKeyboard(page),
    }
  );
  await ctx.answerCbQuery();
});
const pageSize = 5;
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.action('leader_boards', async (ctx) => {
  await ctx.answerCbQuery();

  const pages = paginateUsers(topUsers, pageSize);
  const pageIndex = 0;

  const text = `üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n\n${formatLeaderboardPage(
    pages[pageIndex],
    pageIndex * pageSize
  )}`;

  await ctx.editMessageText(text, getPaginationKeyboardUsers(pageIndex, pages.length));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.action(/leader_page_(\d+)/, async (ctx) => {
  const pageIndex = Number(ctx.match[1]);
  const pages = paginateUsers(topUsers, pageSize);

  if (pageIndex < 0 || pageIndex >= pages.length) {
    await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    return;
  }

  const pageUsers = pages[pageIndex];
  const text = `üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n\n${formatLeaderboardPage(
    pageUsers,
    pageIndex * pageSize
  )}`;

  await ctx.editMessageText(text, getPaginationKeyboardUsers(pageIndex, pages.length));

  await ctx.answerCbQuery();
});
bot.action(/photo_page_(\d+)/, async (ctx) => {
  const page = parseInt(ctx.match[1]);

  if (page < 0 || page >= pages.length) {
    return ctx.answerCbQuery();
  }

  await ctx.editMessageMedia(
    {
      type: 'photo',
      media: { source: pages[page].photo },
      caption: pages[page].text, // <-- –¥–æ–±–∞–≤–ª—è–µ–º caption
      parse_mode: 'Markdown', //
    },
    getPaginationKeyboard(page)
  );

  await ctx.answerCbQuery();
});

bot.action(/^select_pair_(.+)$/, async (ctx) => {
  const selectedPairRaw = ctx.match[1];
  const selectedPair = selectedPairRaw.replace(/_/g, '').toUpperCase();
  const { selectedTimeframe, selectedType } = ctx.session;

  if (!selectedTimeframe || !selectedType) {
    await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏ —Ç–∏–ø.');
    return;
  }

  const { text, imgPath } = generateMarketSignal(selectedPair);

  await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É: ${selectedPair}`);

  await ctx.replyWithPhoto(
    { source: fs.createReadStream(imgPath) },
    {
      caption: `üìä ${text}\n\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${selectedTimeframe.toUpperCase()}\n–¢–∏–ø: ${selectedType.toUpperCase()}`,
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')],
      ]).reply_markup,
    }
  );
});

bot.action('get_support_link', async (ctx) => {
  try {
    const response = await fetch(
      'http://localhost:3000/support/get-support-link'
    ); // –∏–ª–∏ —Ç–≤–æ–π –ø—Ä–æ–¥–æ–≤—ã–π URL
    const data = await response.json();

    if (!data.link) {
      return ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    await ctx.reply(`‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n${data.link}`, {
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')],
      ]).reply_markup,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
});
bot.on('callback_query', async (ctx) => {
  const callbackQuery = ctx.callbackQuery;
  if (!callbackQuery || !('data' in callbackQuery)) {
    return;
  }

  const data = callbackQuery.data;

  await handleCallbackQuery(ctx, data);

  if (/^timeframe_([a-z0-9]+)_([a-z]+)$/.test(data)) {
    const match = data.match(/^timeframe_([a-z0-9]+)_([a-z]+)$/);
    if (!match) return;

    const timeframe = match[1];
    const type = match[2];

    ctx.session.selectedTimeframe = timeframe;
    ctx.session.selectedType = type;
    ctx.session.waitingForAdminId = false;
    ctx.session.action = undefined;

    await ctx.answerCbQuery(
      `–í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe.toUpperCase()} (${type.toUpperCase()})`
    );

    const pairButtons = generatePairButtons(type);

    const refreshButton = [
      Markup.button.callback(
        'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        `refresh_pairs_${timeframe}_${type}`
      ),
    ];
    const navigationButtons = [
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_time_menu_${type}`)],
      [Markup.button.callback('üè† –í –º–µ–Ω—é', 'show_main_menu')],
    ];

    await ctx.editMessageText(
      `üìà –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe.toUpperCase()} | –¢–∏–ø: ${type.toUpperCase()}`,
      Markup.inlineKeyboard([
        ...pairButtons,
        refreshButton,
        ...navigationButtons,
      ])
    );

    return;
  }

  if (/^refresh_pairs_([a-z0-9]+)_([a-z]+)$/.test(data)) {
    const match = data.match(/^refresh_pairs_([a-z0-9]+)_([a-z]+)$/);
    if (!match) return;

    const timeframe = match[1];
    const type = match[2];

    const pairButtons = generatePairButtons(type);

    const refreshButton = [
      Markup.button.callback(
        'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        `refresh_pairs_${timeframe}_${type}`
      ),
    ];
    const navigationButtons = [
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_time_menu_${type}`)],
      [Markup.button.callback('üè† –í –º–µ–Ω—é', 'show_main_menu')],
    ];

    await ctx.editMessageText(
      `üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe.toUpperCase()} | –¢–∏–ø: ${type.toUpperCase()}`,
      Markup.inlineKeyboard([
        ...pairButtons,
        refreshButton,
        ...navigationButtons,
      ])
    );
    return;
  }
});

bot.on('text', async (ctx) => {
  if (!ctx.session.waitingForAdminId || !ctx.session.action) return;

  const inputId = ctx?.message?.text?.trim();

  if (!/^\d+$/.test(inputId)) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.');
  }

  const telegramId = inputId;

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const res = await fetch(`http://localhost:3000/users`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      telegramId,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
    }),
  });

  const user = await res.json();

  if (!user) {
    ctx.session.waitingForAdminId = false;
    ctx.session.action = undefined;
    return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${inputId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }

  if (
    ctx.session.action === 'get_signal' &&
    ctx.session.authorizedInQountex === false &&
    user?.qountexId === null
  ) {
    return await ctx.reply(
      '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.',
      Markup.inlineKeyboard([
        [Markup.button.callback('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'start_registration')],
        [Markup.button.callback('üè† –í –º–µ–Ω—é', 'show_main_menu')],
      ])
    );
  }

  if (ctx.session.action === 'give_admin') {
    if (user.role !== 'admin') {
      await fetch(`http://localhost:3000/users/${telegramId}/admin`, {
        method: 'PATCH',
      });
      await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${inputId}.`);
    } else {
      await ctx.reply(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${inputId} —É–∂–µ –∞–¥–º–∏–Ω.`);
    }
  } else if (ctx.session.action === 'revoke_admin') {
    if (user.role === 'admin') {
      await fetch(`http://localhost:3000/users/${telegramId}/revoke-admin`, {
        method: 'PATCH',
      });
      await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${inputId}.`);
    } else {
      await ctx.reply(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${inputId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.`);
    }
  }

  ctx.session.waitingForAdminId = false;
  ctx.session.action = undefined;
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
