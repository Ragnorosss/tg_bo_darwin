import { Markup, Telegraf, session } from 'telegraf';
import dotenv from 'dotenv';
import { MyContext } from './types/CstContext';
import { getPaginationKeyboard } from './utils/pagintaion';
import { formatLeaderboardPage, paginateUsers } from './utils/leaderboard';
import { getPaginationKeyboardUsers } from './utils/pag-top-user';
import { topUsers } from './components/top-user';
import { pages } from './components/what_bot_can';
import { generateMarketSignal } from './utils/generateMark';
import * as fs from 'fs';
import { handleCallbackQuery } from './utils/callback_interceptor';
import { generatePairButtons } from './utils/btn_generate';
import { adminMenu } from './components/adminMenu';
import { IUser } from './models/User';

dotenv.config();

export const bot = new Telegraf<MyContext>(process.env.BOT_TOKEN!);

bot.use(session());

bot.command('start', async (ctx) => {
  const telegramId = String(ctx.from.id);

  const res = await fetch(`${process.env.URL}users/${telegramId}`, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
  });
  if (!res.ok) {
    const text = await res.text(); // –≤–º–µ—Å—Ç–æ json, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É
    console.error(`–û—à–∏–±–∫–∞ ${res.status}: ${text}`);
    await ctx.reply('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  const user: IUser = await res.json();
  if (!user) {
    await fetch(`${process.env.URL}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        telegramId,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      }),
    });
  }
  console.log(user);
  await ctx.replyWithPhoto(
    { source: './src/assets/welcome.jpg' },
    {
      caption: `üìà –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!

üî• –¢–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –±—ñ–Ω–∞—Ä–Ω–∏—Ö –æ–ø—Ü—ñ–æ–Ω—ñ–≤!
–ù–∞—à –±–æ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≥–ª–∏–±–æ–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É —ñ –Ω–∞–¥–∞—î —Ç–æ—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥.
–¢–æ—Ä–≥—É–π —Ä–æ–∑—É–º–Ω—ñ—à–µ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–µ—Ä—É–π —Ä–∏–∑–∏–∫–∞–º–∏ —ñ –¥–æ–≤—ñ—Ä—è–π –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º!

üí° –ù–∞—à –±–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–¥–æ–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É, —Ç–∞–∫—ñ —è–∫ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –æ–ø–æ—Ä—É, —Ç—Ä–µ–Ω–¥–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —ñ —Å–≤—ñ—á–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –º–æ–º–µ–Ω—Ç–∏ –¥–ª—è –≤—Ö–æ–¥—É –≤ —É–≥–æ–¥—É.
–¢–∏ –∑–∞–≤–∂–¥–∏ –±—É–¥–µ—à –∑–Ω–∞—Ç–∏, –∫–æ–ª–∏ –Ω–∞—Å—Ç–∞—î –Ω–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –æ–ø—Ü—ñ–æ–Ω!

üí∞ –¢–æ—Ä–≥—É–π –∑ —Ä–æ–∑—É–º–æ–º ‚Äî –∑–∞—Ä–æ–±–ª—è–π –±—ñ–ª—å—à–µ! üöÄ`,
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('–î–∞–ª–µ–µ', 'show_main_menu')],
      ]).reply_markup,
    }
  );
});
bot.action('show_admin_menu', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–ê–¥–º—ñ–Ω—Å—å–∫–µ –º–µ–Ω—é:', adminMenu);
});
bot.action('set_support_link', async (ctx) => {
  ctx.session.waitingForSupportLink = true;
  ctx.session.waitingForTraderId = false; // ‚ùó –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏
  await ctx.answerCbQuery(); // –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"
  await ctx.reply(
    'üîó –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://t.me/support)',
    Markup.inlineKeyboard([
      [Markup.button.callback('–í—ñ–¥–º—ñ–Ω–∞', 'show_main_menu')],
    ])
  );
});

bot.action('how_works_bot', async (ctx) => {
  const page = 0;
  await ctx.replyWithPhoto(
    { source: pages[page].photo },
    {
      caption: pages[page].text,
      parse_mode: 'Markdown',
      ...getPaginationKeyboard(page),
    }
  );
  await ctx.answerCbQuery();
});
bot.action('search_by_trade_id', async (ctx) => {
  ctx.session.waitingForTradeId = true;
  await ctx.answerCbQuery();
  await ctx.reply(
    'üîç –í–≤–µ–¥—ñ—Ç—å trade_id –¥–ª—è –ø–æ—à—É–∫—É –ø—Ä–æ—î–∫—Ç—É:',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –í—ñ–¥–º—ñ–Ω–∞', 'show_main_menu')],
    ])
  );
});

bot.on('text', async (ctx) => {
  const inputId = ctx.message.text.trim();

  const senderId = ctx.from.id.toString();

  if (ctx.session.waitingForSupportLink) {
    ctx.session.waitingForSupportLink = false;

    try {
      const response = await fetch(
        `${process.env.URL}support/set-support-link`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ telegramId: senderId, link: inputId }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        return await ctx.reply('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.');
      } else {
        return await ctx.reply(
          `‚ùå –ü–æ–º–∏–ª–∫–∞: ${data.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞.'}`
        );
      }
    } catch (error) {
      console.error(
        '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É:',
        error
      );
      return await ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É.');
    }
  }

  if (!/^\d+$/.test(inputId)) {
    return ctx.reply('‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID.');
  }

  // === 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ===
  if (ctx.session.waitingForUserInfoId) {
    ctx.session.waitingForUserInfoId = false;

    try {
      const senderRes = await fetch(`${process.env.URL}users/${senderId}`);
      const senderData: IUser = await senderRes.json();

      if (!senderRes.ok || !senderData?.role?.includes('admin')) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.');
      }

      const userRes = await fetch(`${process.env.URL}users/${inputId}`);
      const userData = await userRes.json();

      if (!userRes.ok || !userData.telegramId) {
        return ctx.reply(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${inputId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
      }

      const userInfo = `
    üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
    üÜî Telegram ID: ${userData.telegramId}
    üìõ –Ü–º'—è: ${userData.firstName} ${userData.userName}
    üë§ –†–æ–ª—å: ${userData.role}
    üîó Trader ID: ${userData.traderId || "–Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π"}
    ‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${userData.registration ? '–¢–∞–∫' : '–ù—ñ'}
          `;

      return ctx.reply(
        userInfo,
        Markup.inlineKeyboard([
          [Markup.button.callback('üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'show_main_menu')],
          [Markup.button.callback('–ê–¥–º—ñ–Ω –º–µ–Ω—é', 'show_admin_menu')],
        ])
      );
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', error);
      return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.');
    }
  }

  if (ctx.session.waitingForAdminId && ctx.session.action) {
    ctx.session.waitingForAdminId = false;

    const telegramId = inputId;

    try {
      console.log(inputId);

      const res = await fetch(`${process.env.URL}users/${inputId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      });

      if (!res.ok) {
        const text = await res.text(); // –≤–º–µ—Å—Ç–æ json, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É
        console.error(`–û—à–∏–±–∫–∞ ${res.status}: ${text}`);
        await ctx.reply('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      const user = await res.json();

      if (!user) {
        return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${inputId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
      switch (ctx.session.action) {
        case 'give_admin':
          if (user.role === 'admin') {
            return ctx.reply(`‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${inputId} –≤–∂–µ –º–∞—î –∞–¥–º—ñ–Ω–∫—É.`);
          }

          try {
            const res = await fetch(
              `${process.env.URL}users/${telegramId}/admin`,
              {
                method: 'PATCH',
              }
            );

            if (!res.ok) {
              const text = await res.text();
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${res.status}: ${text}`);
              return ctx.reply('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∏–¥–∞—á–µ—é –∞–¥–º—ñ–Ω–∫–∏.');
            }

            return ctx.reply(`‚úÖ –ê–¥–º—ñ–Ω–∫–∞ –Ω–∞–¥–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID ${inputId}.`);
          } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ –∞–¥–º—ñ–Ω–∫–∏:', err);
            return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.');
          }

        case 'revoke_admin':
          if (user.role !== 'admin') {
            return ctx.reply(`‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${inputId} –Ω–µ –º–∞—î –∞–¥–º—ñ–Ω–∫–∏.`);
          }

          try {
            const res = await fetch(
              `${process.env.URL}users/${telegramId}/revoke-admin`,
              {
                method: 'PATCH',
              }
            );

            if (!res.ok) {
              const text = await res.text();
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${res.status}: ${text}`);
              return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω—è—Ç–∏ –∞–¥–º—ñ–Ω–∫—É.');
            }

            return ctx.reply(
              `‚úÖ –ê–¥–º—ñ–Ω–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${inputId}.`
            );
          } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –∞–¥–º—ñ–Ω–∫–∏:', err);
            return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ.');
          }

        case 'grant_access':
          if (user.gaveAdminAccess !== true) {
            await fetch(`${process.env.URL}users/${inputId}/add-access`, {
              method: 'PATCH',
            });
            return ctx.reply(`‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID ${inputId}.`);
          } else {
            return ctx.reply(`‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${inputId} –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø.`);
          }

        case 'revoke_access':
          if (user.gaveAdminAccess === true) {
            await fetch(`${process.env.URL}users/${inputId}/revoke-access`, {
              method: 'PATCH',
            });
            return ctx.reply(
              `‚úÖ –î–æ—Å—Ç—É–ø –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${inputId}.`
            );
          } else {
            return ctx.reply(`‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${inputId} –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É.`);
          }
      }
    } catch (error) {
      console.error('‚ùå Error handling admin action:', error);
      return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.');
    } finally {
      ctx.session.action = undefined;
    }
  }
  if (ctx.session.waitingForTradeId) {
    try {
      const res = await fetch(`${process.env.URL}users/qountexId/${inputId}`, {
        method: 'GET',
      });

      if (!res.ok) {
        const text = await res.text();
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${res.status}: ${text}`);
        return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç –∑–∞ trade_id.');
      }

      await ctx.reply(`‚úÖ –ü—Ä–æ–µ–∫—Ç –∑ trade_id ${inputId} —É—Å–ø—ñ—à–Ω–æ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
      const data = await res.json();
      const userInfo = `
üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
üÜî Telegram ID: ${data.telegramId}
üìõ –Ü–º'—è: ${data.firstName} ${data.username}
üë§ –†–æ–ª—å: ${data.role}
üîó Trader ID: ${data.traderId || "–Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π"}
‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${data.registration ? '–¢–∞–∫' : '–ù—ñ'}
      `;
      return ctx.reply(
        userInfo,
        Markup.inlineKeyboard([
          [Markup.button.callback('üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'show_main_menu')],
          [Markup.button.callback('–ê–¥–º—ñ–Ω –º–µ–Ω—é', 'show_admin_menu')],
        ])
      );
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø—Ä–æ–µ–∫—Ç—É:', err);
      return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ.');
    }
  }
  // === 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è traderId ===
  if (ctx.session.waitingForTraderId) {
    ctx.session.waitingForTraderId = false;

    try {
      const res = await fetch(
        `${process.env.URL}users/${senderId}/link-trader`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ traderId: inputId }),
        }
      );

      const text = await res.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text);

      let data;
      try {
        data = JSON.parse(text);
      } catch {
        return ctx.reply('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
      }

      if (res.ok) {
        return ctx.reply(
          `‚úÖ –í–∞—à ID (${inputId}) —É—Å–ø—ñ—à–Ω–æ –∑–≤‚Äô—è–∑–∞–Ω–æ –∑ –≤–∞—à–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º.`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'show_main_menu')],
          ])
        );
      } else {
        return ctx.reply(
          `‚ùå –ü–æ–º–∏–ª–∫–∞: ${data.error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤‚Äô—è–∑–∞—Ç–∏ ID.'}`
        );
      }
    } catch (error) {
      console.error('‚ùå Error linking trader ID:', error);
      return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.');
    }
  }
});
bot.action('how_works_bot', async (ctx) => {
  const page = 0;
  await ctx.replyWithPhoto(
    { source: pages[page].photo },
    {
      caption: pages[page].text,
      parse_mode: 'Markdown',
      ...getPaginationKeyboard(page),
    }
  );
  await ctx.answerCbQuery();
});
const pageSize = 5;
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.action('leader_boards', async (ctx) => {
  await ctx.answerCbQuery();

  const pages = paginateUsers(topUsers, pageSize);
  const pageIndex = 0;

  const text = `üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n\n${formatLeaderboardPage(
    pages[pageIndex],
    pageIndex * pageSize
  )}`;

  await ctx.editMessageText(
    text,
    getPaginationKeyboardUsers(pageIndex, pages.length)
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.action(/leader_page_(\d+)/, async (ctx) => {
  const pageIndex = Number(ctx.match[1]);
  const pages = paginateUsers(topUsers, pageSize);

  if (pageIndex < 0 || pageIndex >= pages.length) {
    await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    return;
  }

  const pageUsers = pages[pageIndex];
  const text = `üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n\n${formatLeaderboardPage(
    pageUsers,
    pageIndex * pageSize
  )}`;

  await ctx.editMessageText(
    text,
    getPaginationKeyboardUsers(pageIndex, pages.length)
  );

  await ctx.answerCbQuery();
});
bot.action(/photo_page_(\d+)/, async (ctx) => {
  const page = parseInt(ctx.match[1]);

  if (page < 0 || page >= pages.length) {
    return ctx.answerCbQuery();
  }

  await ctx.editMessageMedia(
    {
      type: 'photo',
      media: { source: pages[page].photo },
      caption: pages[page].text, // <-- –¥–æ–±–∞–≤–ª—è–µ–º caption
      parse_mode: 'Markdown', //
    },
    getPaginationKeyboard(page)
  );

  await ctx.answerCbQuery();
});

bot.action(/^select_pair_(.+)$/, async (ctx) => {
  const selectedPairRaw = ctx.match[1];
  const selectedPair = selectedPairRaw.replace(/_/g, '').toUpperCase();
  const { selectedTimeframe, selectedType } = ctx.session;

  if (!selectedTimeframe || !selectedType) {
    await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏ —Ç–∏–ø.');
    return;
  }

  const { text, imgPath } = generateMarketSignal(selectedPair);

  await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É: ${selectedPair}`);

  await ctx.replyWithPhoto(
    { source: fs.createReadStream(imgPath) },
    {
      caption: `üìä ${text}\n\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${selectedTimeframe.toUpperCase()}\n–¢–∏–ø: ${selectedType.toUpperCase()}`,
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'show_main_menu')],
      ]).reply_markup,
    }
  );
});
bot.action('show_user_info', async (ctx) => {
  ctx.session.waitingForUserInfoId = true;

  await ctx.answerCbQuery();
  await ctx.reply(
    'üîç –í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏:',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –í—ñ–¥–º—ñ–Ω–∞', 'show_main_menu')],
    ])
  );
});

bot.action('get_support_link', async (ctx) => {
  try {
    const response = await fetch(`${process.env.URL}support/get-support-link`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
    });
    if (!response.ok) {
      const text = await response.text(); // –≤–º–µ—Å—Ç–æ json, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É
      console.error(`–û—à–∏–±–∫–∞ ${response.status}: ${text}`);
      await ctx.reply('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    const data = await response.json();

    if (!data.link) {
      return ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    await ctx.reply(`‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n${data.link}`, {
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'show_main_menu')],
      ]).reply_markup,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
});
bot.on('callback_query', async (ctx) => {
  const callbackQuery = ctx.callbackQuery;
  if (!callbackQuery || !('data' in callbackQuery)) {
    return;
  }

  const data = callbackQuery.data;

  await handleCallbackQuery(ctx, data);

  if (/^timeframe_([a-z0-9]+)_([a-z]+)$/.test(data)) {
    const match = data.match(/^timeframe_([a-z0-9]+)_([a-z]+)$/);
    if (!match) return;

    const timeframe = match[1];
    const type = match[2];

    ctx.session.selectedTimeframe = timeframe;
    ctx.session.selectedType = type;
    ctx.session.waitingForAdminId = false;
    ctx.session.action = undefined;

    await ctx.answerCbQuery(
      `–í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe.toUpperCase()} (${type.toUpperCase()})`
    );

    const pairButtons = generatePairButtons(type);

    const refreshButton = [
      Markup.button.callback(
        'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        `refresh_pairs_${timeframe}_${type}`
      ),
    ];
    const navigationButtons = [
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_time_menu_${type}`)],
      [Markup.button.callback('üè† –í –º–µ–Ω—é', 'show_main_menu')],
    ];

    await ctx.editMessageText(
      `üìà –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe.toUpperCase()} | –¢–∏–ø: ${type.toUpperCase()}`,
      Markup.inlineKeyboard([
        ...pairButtons,
        refreshButton,
        ...navigationButtons,
      ])
    );

    return;
  }

  if (/^refresh_pairs_([a-z0-9]+)_([a-z]+)$/.test(data)) {
    const match = data.match(/^refresh_pairs_([a-z0-9]+)_([a-z]+)$/);
    if (!match) return;

    const timeframe = match[1];
    const type = match[2];

    const pairButtons = generatePairButtons(type);

    const refreshButton = [
      Markup.button.callback(
        'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        `refresh_pairs_${timeframe}_${type}`
      ),
    ];
    const navigationButtons = [
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `show_time_menu_${type}`)],
      [Markup.button.callback('üè† –í –º–µ–Ω—é', 'show_main_menu')],
    ];

    await ctx.editMessageText(
      `üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe.toUpperCase()} | –¢–∏–ø: ${type.toUpperCase()}`,
      Markup.inlineKeyboard([
        ...pairButtons,
        refreshButton,
        ...navigationButtons,
      ])
    );
    return;
  }
});
bot.action('show_reg_menu', async (ctx) => {
  // –ü–æ–º–µ—á–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç traderId
  ctx.session.waitingForTraderId = true;

  await ctx.answerCbQuery(); // –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
  await ctx.reply(
    `–í–≤–µ–¥—ñ—Ç—å –≤–∞—à ID, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –≤–∞—à–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 46230574)`,
    Markup.inlineKeyboard([
      [Markup.button.callback('–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É', 'get_support_link')],
      [Markup.button.callback('–í—ñ–¥–º—ñ–Ω–∞', 'show_main_menu')],
    ])
  );
});
