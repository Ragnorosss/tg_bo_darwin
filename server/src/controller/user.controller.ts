import { Request, Response } from 'express';
import { UserService } from '../service/user.service';
import { User } from '../models/User';

export class UserController {
  static async GetAccessForUserID(req: Request, res: Response) {
    try {
      const { telegramId } = req.params;
      const user = await UserService.giveAdminAccess(telegramId);
      res.status(200).json(user);
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  static async RevokeAccessForID(req: Request, res: Response) {
    try {
      const { telegramId } = req.params;
      const user = await UserService.revokeAdminAccess(telegramId);
      res.status(200).json(user);
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  static async createUser(req: Request, res: Response) {
    try {
      const user = await UserService.createOrFindUser(req.body);
      res.json(user);
    } catch (e) {
      console.error(e);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  static async getUserByTelegramId(req: Request, res: Response) {
    const { telegramId } = req.params;
    try {
      const user = await User.findOne({ telegramId });
      if (!user) {
        res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }
      res.json(user);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err); // üëà –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  static async giveAdmin(req: Request, res: Response) {
    try {
      const { telegramId } = req.params;
      const user = await UserService.setRole(telegramId, 'admin');
      res.json({ message: '–ê–¥–º–∏–Ω–∫–∞ –≤—ã–¥–∞–Ω–∞', user });
    } catch (e) {
      console.error(e);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  static async revokeAdmin(req: Request, res: Response) {
    try {
      const { telegramId } = req.params;
      const user = await UserService.setRole(telegramId, 'user');
      res.json({ message: '–ê–¥–º–∏–Ω–∫–∞ —É–±—Ä–∞–Ω–∞', user });
    } catch (e) {
      console.error(e);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
  static async handlePostback(req: Request, res: Response): Promise<void> {
    const { uid, status, reg } = req.query;
    console.log(req.query);
    
    console.log(uid, status, reg);
    try {
      
      if (
        typeof uid !== 'string' ||
        typeof status !== 'string' ||
        typeof reg !== 'string'
      ) {
        res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
        return;
      }

      await UserService.savePostbackData({
        uid,
        status,
        registration: reg,
      });

      res.status(200).json({ message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
}
