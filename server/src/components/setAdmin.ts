import { Markup } from 'telegraf';
import { MyContext } from '../types/CstContext';

export async function handleAdminIdInput(
  user: any,
  ctx: MyContext,
  inputId: string
) {
  ctx.session.waitingForAdminId = true;

  const telegramId = inputId;

  switch (ctx.session.action) {
    case 'give_admin':
      if (user.role === 'admin') {
        ctx.session.waitingForAdminId = false;
        return ctx.reply(
          `‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${inputId} –≤–∂–µ –º–∞—î –∞–¥–º—ñ–Ω–∫—É.`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'show_main_menu')],
            [Markup.button.callback('–ê–¥–º—ñ–Ω –º–µ–Ω—é', 'show_admin_menu')],
          ])
        );
      }

      const res2 = await fetch(`${process.env.URL}users/${telegramId}/admin`, {
        method: 'PATCH',
      });

      if (!res2.ok) {
        const text = await res2.text();
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${res2.status}: ${text}`);
        return ctx.reply(
          '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∏–¥–∞—á–µ—é –∞–¥–º—ñ–Ω–∫–∏.',
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –í—ñ–¥–º—ñ–Ω–∞', 'show_main_menu')],
          ])
        );
      }

      ctx.session.waitingForAdminId = false;
      return ctx.reply(
        `‚úÖ –ê–¥–º—ñ–Ω–∫–∞ –Ω–∞–¥–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID ${inputId}.`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'show_main_menu')],
          [Markup.button.callback('–ê–¥–º—ñ–Ω –º–µ–Ω—é', 'show_admin_menu')],
        ])
      );
  }
}
